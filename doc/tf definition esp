📄 Documentación — Decisiones sobre el uso de Terraform

🎯 Contexto

Con la migración de GitLab y CloudFormation hacia GitHub y Terraform, estamos definiendo nuevas decisiones y directrices sobre el uso de Terraform, basándonos en los aprendizajes adquiridos en Brasil.

Inicialmente pensamos en replicar el modelo brasileño: un repositorio por módulo, donde cada recurso o componente principal tendría su propio repositorio dedicado, incluyendo todos los subcomponentes necesarios.

Este enfoque funciona bien en empresas grandes con equipos autónomos responsables de su propia infraestructura. En Uruguay, concluimos que el escenario es distinto.

💬 Discusiones y cambio de dirección

Tras conversaciones con el equipo de Infraestructura y el equipo de The Voice, identificamos que:

El equipo local es pequeño (4 miembros en Infra/DevOps).

No existen squads autónomos; toda la gestión de infraestructura está centralizada en el equipo de Infra/DevOps.


Por lo tanto, decidimos usar un repositorio único por cuenta de producto, centralizando todos los recursos y módulos necesarios. Esta elección simplifica la gobernanza, el mantenimiento y permite al equipo enfocarse en mejoras y automatización.

🗂️ Estructura actual definida

Repositorio único por cuenta de producto.

Organización interna en módulos reutilizables.

Ejemplo: EC2, S3, Fargate, roles y VPCs en el mismo repositorio.


✅ Pros y contras — Módulos en repos separados vs. repositorio único

Repos separados por módulo

Pros

Alta autonomía por equipo.

Alta escalabilidad organizacional.

Posibilidad de control de despliegues más granular.

Mayor velocidad si hay muchos equipos trabajando en paralelo.


Contras

Mantenimiento complejo (muchos repos, pipelines separados).

Gobernanza más robusta y complicada (tags, policies).



Repositorio único con todos los módulos

Pros

Simplicidad de mantenimiento y pipelines.

Gobernanza centralizada y más simple.

Visión consolidada del ambiente.


Contras

Menor autonomía para equipos.

Limitado en escalabilidad si se crece mucho.

Control de despliegue menos granular.



✅ Pros y contras — Repos separados por recurso vs. único por cuenta

Repos separados por recurso

Pros

Aislamiento total.

Control independiente y granular.

Facilita escalabilidad futura si hay muchos equipos.


Contras

Visión fragmentada del ambiente.

Gobernanza de secrets más compleja.

Mayor complejidad en CI/CD (muchos pipelines).

Dependencias difíciles de gestionar.



Repositorio único por cuenta

Pros

Visión completa y consolidada.

Gobernanza centralizada.

Menor complejidad en CI/CD.

Gestión de dependencias simplificada.


Contras

Aislamiento bajo.

Puede necesitar reestructuración si se escala mucho.



💡 Decisión final

Repositorio único por cuenta de producto.

Organización interna en módulos.

Pipelines y gobernanza simplificados.

Revisión periódica futura.


🚀 Próximos pasos

Documentar la estructura de carpetas y módulos.

Configurar pipelines (OIDC y workflows reutilizables).

Implementar aprobaciones manuales para producción.

Crear guías internas para contribución y revisión.


✍️ Conclusión

La estrategia actual está basada en el tamaño del equipo, simplicidad operativa y visión consolidada. Este documento será vivo, actualizándose según nuevas necesidades y aprendizajes.


---

🗒️ Template README.md sugerido

# 🚀 Nombre del Repositorio

## 📄 Descripción

Repositorio Terraform para la cuenta **<nombre_de_la_cuenta>**. Incluye EC2, S3, Fargate, roles, VPCs y otros recursos relacionados.

## 🏗️ Estructura

.
├── main.tf
├── variables.tf
├── outputs.tf
├── versions.tf
├── modules/
│   ├── ec2/
│   ├── s3/
│   ├── fargate/
│   └── ...
├── environments/
│   ├── dev/
│   ├── staging/
│   └── prod/
└── README.md

## ⚙️ Deploy

```bash
terraform init
terraform fmt -recursive
terraform validate
terraform plan -var-file="environments/dev/dev.tfvars"
terraform apply -var-file="environments/dev/dev.tfvars"

🔐 Seguridad

Autenticación con OIDC (GitHub Actions).

Permisos mínimos necesarios.


👨‍💻 Contribución

1. Crear una branch.


2. Realizar cambios.


3. Abrir un Pull Request.


4. Esperar revisión.



📝 Notas

Los cambios en prod requieren aprobación manual.

Seguir las guías internas oficiales.


📞 Contacto

Equipo Infra/DevOps — <contacto>

¡Listo para exportar y subir al Git!

