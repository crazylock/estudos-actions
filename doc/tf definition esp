📄 Documentación — Decisiones sobre el uso de Terraform

🎯 Contexto

Con la expansión de las operaciones en Uruguay, iniciamos la definición de la estrategia para la gestión de infraestructura como código (IaC) utilizando Terraform, considerando la realidad local y los aprendizajes adquiridos en Brasil.

Inicialmente pensamos en replicar el modelo brasileño: un repositorio por módulo, donde cada recurso o componente principal tendría su propio repositorio dedicado, incluyendo todos los subcomponentes necesarios.

Este enfoque funciona bien en empresas grandes con equipos autónomos responsables de su propia infraestructura. En Uruguay, concluimos que el escenario es distinto.

💬 Discusiones y cambio de dirección

Tras conversaciones con el equipo de Infraestructura y el equipo de The Voice, identificamos que:

El equipo local es pequeño (4 miembros en Infra/DevOps).

No existen squads autónomos; toda la gestión de infraestructura está centralizada en el equipo de Infra/DevOps.


Por lo tanto, decidimos usar un repositorio único por cuenta de producto, centralizando todos los recursos y módulos necesarios. Esta elección simplifica la gobernanza, el mantenimiento y permite al equipo enfocarse en mejoras y automatización.

🗂️ Estructura actual definida

Repositorio único por cuenta de producto.

Organización interna en módulos reutilizables.

Ejemplo: EC2, S3, Fargate, roles y VPCs en el mismo repositorio.


✅ Tabla de pros y contras — Módulos en repositorios separados vs. repositorio único

Criterio	Repos separados por módulo	Repositorio único

Autonomía por equipo	Alta	Baja, gestión centralizada
Escalabilidad organizacional	Alta	Limitada, suficiente
Mantenimiento	Complejo	Simple
Control de deploy	Más granular	Centralizado
Velocidad de cambios	Alta	Más controlada
Gobernanza	Más robusta	Más simple


✅ Tabla de pros y contras — Separados por recurso vs. único por cuenta

Criterio	Separados por recurso	Único por cuenta

Aislamiento	Total	Bajo
Visión general	Fragmentada	Consolidada
Gobernanza de secrets	Compleja	Centralizada
Complejidad CI/CD	Alta	Baja
Dependencias	Complejas	Simples
Escalabilidad futura	Buena	Puede requerir ajuste


💡 Decisión final

Repositorio único por cuenta de producto.

Organización interna en módulos.

Pipelines y gobernanza simplificados.

Revisión periódica a futuro.


🚀 Próximos pasos

Documentar la estructura de carpetas y módulos.

Configurar pipelines (OIDC y workflows reutilizables).

Implementar aprobaciones manuales para producción.

Crear guías internas para contribución y revisión.


✍️ Conclusión

La estrategia actual está basada en el tamaño del equipo, simplicidad operativa y visión consolidada. Este documento será vivo, actualizándose según nuevas necesidades y aprendizajes.


---

🗒️ Template README.md sugerido

# 🚀 Nombre del Repositorio

## 📄 Descripción

Repositorio Terraform para la cuenta **<nombre_de_la_cuenta>**. Incluye EC2, S3, Fargate, roles, VPCs y otros recursos relacionados.

## 🏗️ Estructura

.
├── main.tf
├── variables.tf
├── outputs.tf
├── versions.tf
├── modules/
│   ├── ec2/
│   ├── s3/
│   ├── fargate/
│   └── ...
├── environments/
│   ├── dev/
│   ├── staging/
│   └── prod/
└── README.md

## ⚙️ Deploy

```bash
terraform init
terraform fmt -recursive
terraform validate
terraform plan -var-file="environments/dev/dev.tfvars"
terraform apply -var-file="environments/dev/dev.tfvars"

🔐 Seguridad

Autenticación con OIDC (GitHub Actions).

Permisos mínimos necesarios.


👨‍💻 Contribución

1. Crear una branch.


2. Realizar cambios.


3. Abrir un Pull Request.


4. Esperar revisión.



📝 Notas

Los cambios en prod requieren aprobación manual.

Seguir las guías internas oficiales.


📞 Contacto

Equipo Infra/DevOps — <contacto>

Listo para exportar como archivo `.md` y subir a Git.

